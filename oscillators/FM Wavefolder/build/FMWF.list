
build/FMWF.elf:     file format elf32-littlearm


Disassembly of section .text:

20000040 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000040:	4770      	bx	lr

20000042 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000042:	4770      	bx	lr

20000044 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000044:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
20000046:	4770      	bx	lr
20000048:	4770      	bx	lr
2000004a:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
2000004c:	4770      	bx	lr

2000004e <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2000004e:	4b10      	ldr	r3, [pc, #64]	; (20000090 <_entry+0x42>)
20000050:	4a10      	ldr	r2, [pc, #64]	; (20000094 <_entry+0x46>)
20000052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000056:	4688      	mov	r8, r1
20000058:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005a:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
2000005c:	4293      	cmp	r3, r2
2000005e:	d002      	beq.n	20000066 <_entry+0x18>
    *(bss_p++) = 0;
20000060:	f803 1f01 	strb.w	r1, [r3, #1]!
20000064:	e7fa      	b.n	2000005c <_entry+0xe>
20000066:	4b0c      	ldr	r3, [pc, #48]	; (20000098 <_entry+0x4a>)
20000068:	4c0c      	ldr	r4, [pc, #48]	; (2000009c <_entry+0x4e>)
2000006a:	1ae4      	subs	r4, r4, r3
2000006c:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000006e:	2500      	movs	r5, #0
20000070:	461e      	mov	r6, r3
20000072:	42a5      	cmp	r5, r4
20000074:	d005      	beq.n	20000082 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20000076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007a:	b103      	cbz	r3, 2000007e <_entry+0x30>
      init_p();
2000007c:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000007e:	3501      	adds	r5, #1
20000080:	e7f7      	b.n	20000072 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000082:	4641      	mov	r1, r8
20000084:	4638      	mov	r0, r7
20000086:	f000 f80b 	bl	200000a0 <_hook_init>
2000008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000008e:	bf00      	nop
20000090:	20001627 	.word	0x20001627
20000094:	2000164f 	.word	0x2000164f
20000098:	20000040 	.word	0x20000040
2000009c:	20000040 	.word	0x20000040

200000a0 <_hook_init>:

static Osc carrierOscillator;
static Osc modulatorOscillator;

void OSC_INIT(uint32_t platform, uint32_t api) {
	carrierOscillator.waveFold = 0.f;
200000a0:	4b07      	ldr	r3, [pc, #28]	; (200000c0 <_hook_init+0x20>)
200000a2:	2100      	movs	r1, #0
	carrierOscillator.phase = 0.f;
	carrierOscillator.octave = 0;
200000a4:	2200      	movs	r2, #0

static Osc carrierOscillator;
static Osc modulatorOscillator;

void OSC_INIT(uint32_t platform, uint32_t api) {
	carrierOscillator.waveFold = 0.f;
200000a6:	6059      	str	r1, [r3, #4]
	carrierOscillator.phase = 0.f;
200000a8:	6019      	str	r1, [r3, #0]
	carrierOscillator.octave = 0;
200000aa:	741a      	strb	r2, [r3, #16]
	carrierOscillator.semitone = 0;
200000ac:	745a      	strb	r2, [r3, #17]
	carrierOscillator.cent = 0;
200000ae:	749a      	strb	r2, [r3, #18]
	carrierOscillator.waveControl = 0.f;
200000b0:	60d9      	str	r1, [r3, #12]
  
	modulatorOscillator.phase = 0.f;
200000b2:	6159      	str	r1, [r3, #20]
	modulatorOscillator.fmDepth = 0.f;
200000b4:	61d9      	str	r1, [r3, #28]
	modulatorOscillator.semitone = 0;
200000b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	modulatorOscillator.cent = 0;
200000ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
200000be:	4770      	bx	lr
200000c0:	20001628 	.word	0x20001628

200000c4 <_Z8osc_mainf>:
}


//main oscillator - uses modulus to create saw and triangle waves. 
float osc_main(float phase) {
200000c4:	b530      	push	{r4, r5, lr}
	float waveControl = carrierOscillator.waveControl * 10.f;
200000c6:	4b56      	ldr	r3, [pc, #344]	; (20000220 <_Z8osc_mainf+0x15c>)
200000c8:	edd3 7a03 	vldr	s15, [r3, #12]
	modulatorOscillator.cent = 0;
}


//main oscillator - uses modulus to create saw and triangle waves. 
float osc_main(float phase) {
200000cc:	ed2d 8b04 	vpush	{d8-d9}
	float waveControl = carrierOscillator.waveControl * 10.f;
200000d0:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
200000d4:	ee67 8aa8 	vmul.f32	s17, s15, s17
	float gainAdjustment;

	
		if (waveControl < 0.5f) {
200000d8:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
200000dc:	eef4 8ac9 	vcmpe.f32	s17, s18
200000e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	modulatorOscillator.cent = 0;
}


//main oscillator - uses modulus to create saw and triangle waves. 
float osc_main(float phase) {
200000e4:	b083      	sub	sp, #12
200000e6:	461c      	mov	r4, r3
	float waveControl = carrierOscillator.waveControl * 10.f;
	float gainAdjustment;

	
		if (waveControl < 0.5f) {
200000e8:	d515      	bpl.n	20000116 <_Z8osc_mainf+0x52>
			gainAdjustment = fmod(waveControl,0.5f)*2.f;
200000ea:	ee18 0a90 	vmov	r0, s17
200000ee:	f000 fb6d 	bl	200007cc <__aeabi_f2d>
200000f2:	ed9f 1b47 	vldr	d1, [pc, #284]	; 20000210 <_Z8osc_mainf+0x14c>
200000f6:	ec41 0b10 	vmov	d0, r0, r1
200000fa:	f000 febb 	bl	20000e74 <fmod>
200000fe:	ec53 2b10 	vmov	r2, r3, d0
20000102:	ee10 0a10 	vmov	r0, s0
20000106:	4619      	mov	r1, r3
20000108:	f000 fa02 	bl	20000510 <__adddf3>
2000010c:	f000 fe62 	bl	20000dd4 <__aeabi_d2f>
20000110:	ee08 0a10 	vmov	s16, r0
20000114:	e01a      	b.n	2000014c <_Z8osc_mainf+0x88>
	}
		else {
			gainAdjustment = 1.f + fmod(-waveControl,0.5f)*2.f;
20000116:	eef1 7a68 	vneg.f32	s15, s17
2000011a:	ee17 0a90 	vmov	r0, s15
2000011e:	f000 fb55 	bl	200007cc <__aeabi_f2d>
20000122:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 20000210 <_Z8osc_mainf+0x14c>
20000126:	ec41 0b10 	vmov	d0, r0, r1
2000012a:	f000 fea3 	bl	20000e74 <fmod>
2000012e:	ec53 2b10 	vmov	r2, r3, d0
20000132:	ee10 0a10 	vmov	r0, s0
20000136:	4619      	mov	r1, r3
20000138:	f000 f9ea 	bl	20000510 <__adddf3>
2000013c:	2200      	movs	r2, #0
2000013e:	4b39      	ldr	r3, [pc, #228]	; (20000224 <_Z8osc_mainf+0x160>)
20000140:	f000 f9e6 	bl	20000510 <__adddf3>
20000144:	f000 fe46 	bl	20000dd4 <__aeabi_d2f>
20000148:	ee08 0a10 	vmov	s16, r0
	}
	
	float osc_mainOut;
		if (carrierOscillator.phase < waveControl) {
2000014c:	6820      	ldr	r0, [r4, #0]
2000014e:	ee07 0a90 	vmov	s15, r0
20000152:	eef4 8ae7 	vcmpe.f32	s17, s15
20000156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000015a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2000015e:	dd26      	ble.n	200001ae <_Z8osc_mainf+0xea>
			osc_mainOut = fmod(carrierOscillator.phase,1.f) * (1.f + gainAdjustment) - (1.f + gainAdjustment)/2;
20000160:	f000 fb34 	bl	200007cc <__aeabi_f2d>
20000164:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 20000218 <_Z8osc_mainf+0x154>
20000168:	ec41 0b10 	vmov	d0, r0, r1
2000016c:	f000 fe82 	bl	20000e74 <fmod>
20000170:	ee38 8a28 	vadd.f32	s16, s16, s17
20000174:	ec53 2b10 	vmov	r2, r3, d0
20000178:	ee18 0a10 	vmov	r0, s16
2000017c:	e9cd 2300 	strd	r2, r3, [sp]
20000180:	f000 fb24 	bl	200007cc <__aeabi_f2d>
20000184:	e9dd 2300 	ldrd	r2, r3, [sp]
20000188:	f000 fb74 	bl	20000874 <__aeabi_dmul>
2000018c:	ee68 7a09 	vmul.f32	s15, s16, s18
20000190:	4604      	mov	r4, r0
20000192:	ee17 0a90 	vmov	r0, s15
20000196:	460d      	mov	r5, r1
20000198:	f000 fb18 	bl	200007cc <__aeabi_f2d>
2000019c:	4602      	mov	r2, r0
2000019e:	460b      	mov	r3, r1
200001a0:	4620      	mov	r0, r4
200001a2:	4629      	mov	r1, r5
200001a4:	f000 f9b2 	bl	2000050c <__aeabi_dsub>
200001a8:	f000 fe14 	bl	20000dd4 <__aeabi_d2f>
200001ac:	e027      	b.n	200001fe <_Z8osc_mainf+0x13a>
	}
		else {
			osc_mainOut = fmod(-carrierOscillator.phase,1.f) * (1.f + gainAdjustment) + (1.f + gainAdjustment)/2;
200001ae:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
200001b2:	f000 fb0b 	bl	200007cc <__aeabi_f2d>
200001b6:	ed9f 1b18 	vldr	d1, [pc, #96]	; 20000218 <_Z8osc_mainf+0x154>
200001ba:	ec41 0b10 	vmov	d0, r0, r1
200001be:	f000 fe59 	bl	20000e74 <fmod>
200001c2:	ee38 8a28 	vadd.f32	s16, s16, s17
200001c6:	ec53 2b10 	vmov	r2, r3, d0
200001ca:	ee18 0a10 	vmov	r0, s16
200001ce:	e9cd 2300 	strd	r2, r3, [sp]
200001d2:	f000 fafb 	bl	200007cc <__aeabi_f2d>
200001d6:	e9dd 2300 	ldrd	r2, r3, [sp]
200001da:	f000 fb4b 	bl	20000874 <__aeabi_dmul>
200001de:	ee68 7a09 	vmul.f32	s15, s16, s18
200001e2:	4604      	mov	r4, r0
200001e4:	ee17 0a90 	vmov	r0, s15
200001e8:	460d      	mov	r5, r1
200001ea:	f000 faef 	bl	200007cc <__aeabi_f2d>
200001ee:	4602      	mov	r2, r0
200001f0:	460b      	mov	r3, r1
200001f2:	4620      	mov	r0, r4
200001f4:	4629      	mov	r1, r5
200001f6:	f000 f98b 	bl	20000510 <__adddf3>
200001fa:	f000 fdeb 	bl	20000dd4 <__aeabi_d2f>
	}
	return osc_mainOut;
}
200001fe:	ee00 0a10 	vmov	s0, r0
20000202:	b003      	add	sp, #12
20000204:	ecbd 8b04 	vpop	{d8-d9}
20000208:	bd30      	pop	{r4, r5, pc}
2000020a:	bf00      	nop
2000020c:	f3af 8000 	nop.w
20000210:	00000000 	.word	0x00000000
20000214:	3fe00000 	.word	0x3fe00000
20000218:	00000000 	.word	0x00000000
2000021c:	3ff00000 	.word	0x3ff00000
20000220:	20001628 	.word	0x20001628
20000224:	3ff00000 	.word	0x3ff00000

20000228 <_hook_cycle>:

void OSC_CYCLE(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames) { 
20000228:	b5f0      	push	{r4, r5, r6, r7, lr}
  float freqOsc1;
  float modOsc1;
  float fmOsc;
   
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
2000022a:	4c8f      	ldr	r4, [pc, #572]	; (20000468 <_hook_cycle+0x240>)
2000022c:	8883      	ldrh	r3, [r0, #4]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
2000022e:	eddf 5a8f 	vldr	s11, [pc, #572]	; 2000046c <_hook_cycle+0x244>
			osc_mainOut = fmod(-carrierOscillator.phase,1.f) * (1.f + gainAdjustment) + (1.f + gainAdjustment)/2;
	}
	return osc_mainOut;
}

void OSC_CYCLE(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames) { 
20000232:	460d      	mov	r5, r1
  float freqOsc1;
  float modOsc1;
  float fmOsc;
   
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
20000234:	7c61      	ldrb	r1, [r4, #17]
20000236:	eb01 2613 	add.w	r6, r1, r3, lsr #8
2000023a:	7c21      	ldrb	r1, [r4, #16]
2000023c:	4431      	add	r1, r6
2000023e:	ee07 1a90 	vmov	s15, r1
			osc_mainOut = fmod(-carrierOscillator.phase,1.f) * (1.f + gainAdjustment) + (1.f + gainAdjustment)/2;
	}
	return osc_mainOut;
}

void OSC_CYCLE(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames) { 
20000242:	ed2d 8b0a 	vpush	{d8-d12}
  float freqOsc1;
  float modOsc1;
  float fmOsc;
   
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
20000246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  const float oscMod = (params->pitch + carrierOscillator.cent) & 0xFF;
2000024a:	7ca1      	ldrb	r1, [r4, #18]
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
2000024c:	4e88      	ldr	r6, [pc, #544]	; (20000470 <_hook_cycle+0x248>)
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000024e:	eddf aa89 	vldr	s21, [pc, #548]	; 20000474 <_hook_cycle+0x24c>
  
  //compute phase increments for FM oscillator (from note)
  const float w1 = osc_w0f_for_note(oscNote + modulatorOscillator.semitone, oscMod + modulatorOscillator.cent);  

   //get LFO value
  const float lfo = q31_to_f32(params->shape_lfo);  
20000252:	ed90 ba00 	vldr	s22, [r0]
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000256:	ed9f ca88 	vldr	s24, [pc, #544]	; 20000478 <_hook_cycle+0x250>
        //set phase position of wave
		carrierOscillator.phase += w0;
		carrierOscillator.phase -= (uint32_t)carrierOscillator.phase;		
		
		//fill buffer
		*(y++) = f32_to_q31(audioSignal);
2000025a:	eddf ba88 	vldr	s23, [pc, #544]	; 2000047c <_hook_cycle+0x254>
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
  const float oscMod = (params->pitch + carrierOscillator.cent) & 0xFF;
  
  //compute phase increments for carrier oscillator (from freq)
  const float f0 = osc_notehzf(oscNote);
2000025e:	eefc 6ac7 	vcvt.u32.f32	s13, s14
			osc_mainOut = fmod(-carrierOscillator.phase,1.f) * (1.f + gainAdjustment) + (1.f + gainAdjustment)/2;
	}
	return osc_mainOut;
}

void OSC_CYCLE(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames) { 
20000262:	b083      	sub	sp, #12
  float modOsc1;
  float fmOsc;
   
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
  const float oscMod = (params->pitch + carrierOscillator.cent) & 0xFF;
20000264:	440b      	add	r3, r1
  
  //compute phase increments for carrier oscillator (from freq)
  const float f0 = osc_notehzf(oscNote);
20000266:	edcd 6a01 	vstr	s13, [sp, #4]
  float modOsc1;
  float fmOsc;
   
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
  const float oscMod = (params->pitch + carrierOscillator.cent) & 0xFF;
2000026a:	b2db      	uxtb	r3, r3
  
  //compute phase increments for carrier oscillator (from freq)
  const float f0 = osc_notehzf(oscNote);
  const float f1 = osc_notehzf(oscNote+1);
2000026c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
  float modOsc1;
  float fmOsc;
   
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
  const float oscMod = (params->pitch + carrierOscillator.cent) & 0xFF;
20000270:	ee07 3a90 	vmov	s15, r3
  
  //compute phase increments for carrier oscillator (from freq)
  const float f0 = osc_notehzf(oscNote);
  const float f1 = osc_notehzf(oscNote+1);
20000274:	ee77 6a0a 	vadd.f32	s13, s14, s20
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
  const float oscMod = (params->pitch + carrierOscillator.cent) & 0xFF;
  
  //compute phase increments for carrier oscillator (from freq)
  const float f0 = osc_notehzf(oscNote);
20000278:	f89d 3004 	ldrb.w	r3, [sp, #4]
  const float f1 = osc_notehzf(oscNote+1);
2000027c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
20000280:	2b96      	cmp	r3, #150	; 0x96
20000282:	bf94      	ite	ls
20000284:	4619      	movls	r1, r3
20000286:	2197      	movhi	r1, #151	; 0x97
20000288:	edcd 6a01 	vstr	s13, [sp, #4]
2000028c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
20000290:	edd1 9a00 	vldr	s19, [r1]
20000294:	f89d 1004 	ldrb.w	r1, [sp, #4]
  const float f = clipmaxf(linintf(oscMod * k_note_mod_fscale, f0, f1), k_note_max_hz);
  
  //compute phase increments for FM oscillator (from note)
  const float w1 = osc_w0f_for_note(oscNote + modulatorOscillator.semitone, oscMod + modulatorOscillator.cent);  
20000298:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
2000029c:	2996      	cmp	r1, #150	; 0x96
2000029e:	bf88      	it	hi
200002a0:	2197      	movhi	r1, #151	; 0x97
200002a2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
  float modOsc1;
  float fmOsc;
   
  //get frequency of carrier oscillator
  const float oscNote = ((params->pitch)>>8) + carrierOscillator.semitone + carrierOscillator.octave;
  const float oscMod = (params->pitch + carrierOscillator.cent) & 0xFF;
200002a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200002aa:	edd1 6a00 	vldr	s13, [r1]
  const float f0 = osc_notehzf(oscNote);
  const float f1 = osc_notehzf(oscNote+1);
  const float f = clipmaxf(linintf(oscMod * k_note_mod_fscale, f0, f1), k_note_max_hz);
  
  //compute phase increments for FM oscillator (from note)
  const float w1 = osc_w0f_for_note(oscNote + modulatorOscillator.semitone, oscMod + modulatorOscillator.cent);  
200002ae:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
200002b2:	ee27 6aa5 	vmul.f32	s12, s15, s11
200002b6:	ee76 6ae9 	vsub.f32	s13, s13, s19

   //get LFO value
  const float lfo = q31_to_f32(params->shape_lfo);  
200002ba:	eeba bae0 	vcvt.f32.s32	s22, s22, #31
200002be:	eee6 9a26 	vfma.f32	s19, s12, s13
  
  //setting buffer
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;
200002c2:	eb05 0782 	add.w	r7, r5, r2, lsl #2

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200002c6:	eddf 6a6e 	vldr	s13, [pc, #440]	; 20000480 <_hook_cycle+0x258>
200002ca:	ee39 6ae6 	vsub.f32	s12, s19, s13
200002ce:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
  const float f0 = osc_notehzf(oscNote);
  const float f1 = osc_notehzf(oscNote+1);
  const float f = clipmaxf(linintf(oscMod * k_note_mod_fscale, f0, f1), k_note_max_hz);
  
  //compute phase increments for FM oscillator (from note)
  const float w1 = osc_w0f_for_note(oscNote + modulatorOscillator.semitone, oscMod + modulatorOscillator.cent);  
200002d2:	ee06 3a10 	vmov	s12, r3
200002d6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
200002da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002de:	ee36 7a07 	vadd.f32	s14, s12, s14
200002e2:	bfa8      	it	ge
200002e4:	eef0 9a66 	vmovge.f32	s19, s13
200002e8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
200002ec:	ed8d 7a01 	vstr	s14, [sp, #4]
200002f0:	ee07 1a10 	vmov	s14, r1
200002f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
200002f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
200002fc:	ee77 7a27 	vadd.f32	s15, s14, s15
20000300:	2b96      	cmp	r3, #150	; 0x96
20000302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
20000306:	edcd 7a01 	vstr	s15, [sp, #4]
2000030a:	f89d 1004 	ldrb.w	r1, [sp, #4]
2000030e:	ee07 1a90 	vmov	s15, r1
20000312:	bf98      	it	ls
20000314:	4619      	movls	r1, r3
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
20000316:	f103 0301 	add.w	r3, r3, #1
2000031a:	b2db      	uxtb	r3, r3
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
2000031c:	bf88      	it	hi
2000031e:	2197      	movhi	r1, #151	; 0x97
20000320:	2b96      	cmp	r3, #150	; 0x96
20000322:	bf88      	it	hi
20000324:	2397      	movhi	r3, #151	; 0x97
20000326:	eb06 0181 	add.w	r1, r6, r1, lsl #2
2000032a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
2000032e:	ed91 9a00 	vldr	s18, [r1]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000332:	ed93 7a00 	vldr	s14, [r3]
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000336:	4e53      	ldr	r6, [pc, #332]	; (20000484 <_hook_cycle+0x25c>)
20000338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000033c:	ee37 7a49 	vsub.f32	s14, s14, s18
20000340:	ee67 7aa5 	vmul.f32	s15, s15, s11
20000344:	eea7 9a87 	vfma.f32	s18, s15, s14

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000348:	eeb4 9ae6 	vcmpe.f32	s18, s13
2000034c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000350:	bfb8      	it	lt
20000352:	eef0 6a49 	vmovlt.f32	s13, s18
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
20000356:	ee26 9aaa 	vmul.f32	s18, s13, s21
  
  //setting buffer
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;
  
	for (; y != y_e; ) {
2000035a:	42bd      	cmp	r5, r7
2000035c:	d07f      	beq.n	2000045e <_hook_cycle+0x236>

		//FM oscillator
		float fmOsc = osc_sinf(modulatorOscillator.phase);
2000035e:	ed94 7a05 	vldr	s14, [r4, #20]
		modulatorOscillator.phase += w1;
		modulatorOscillator.phase -= (uint32_t)modulatorOscillator.phase;
		
		// Main (carrier) Oscillator
        float wavefold_audioIn  = 0.5f * osc_main(carrierOscillator.phase) * (1.f + carrierOscillator.waveFold);
20000362:	edd4 8a00 	vldr	s17, [r4]
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000366:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2000036a:	eeb0 0a68 	vmov.f32	s0, s17
2000036e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000372:	ee77 7a67 	vsub.f32	s15, s14, s15
  
	for (; y != y_e; ) {

		//FM oscillator
		float fmOsc = osc_sinf(modulatorOscillator.phase);
		modulatorOscillator.phase += w1;
20000376:	ee37 7a09 	vadd.f32	s14, s14, s18
2000037a:	ee67 7a8c 	vmul.f32	s15, s15, s24
    const uint32_t x0p = (uint32_t)x0f;
2000037e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
20000382:	ee16 1a90 	vmov	r1, s13

    const uint32_t x0 = x0p & k_wt_sine_mask;
20000386:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000038a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
2000038e:	3301      	adds	r3, #1

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000390:	eef8 6a66 	vcvt.f32.u32	s13, s13
20000394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000398:	eb06 0383 	add.w	r3, r6, r3, lsl #2
2000039c:	ed92 8a00 	vldr	s16, [r2]
200003a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
200003a4:	edd3 6a00 	vldr	s13, [r3]
200003a8:	ee76 6ac8 	vsub.f32	s13, s13, s16
    return (x0p < k_wt_sine_size)?y0:-y0;
200003ac:	297f      	cmp	r1, #127	; 0x7f
200003ae:	eea7 8aa6 	vfma.f32	s16, s15, s13
		modulatorOscillator.phase -= (uint32_t)modulatorOscillator.phase;
200003b2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
200003b6:	bf88      	it	hi
200003b8:	eeb1 8a48 	vneghi.f32	s16, s16
200003bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
200003c0:	ee37 7a67 	vsub.f32	s14, s14, s15
200003c4:	ed84 7a05 	vstr	s14, [r4, #20]
		
		// Main (carrier) Oscillator
        float wavefold_audioIn  = 0.5f * osc_main(carrierOscillator.phase) * (1.f + carrierOscillator.waveFold);
200003c8:	f7ff fe7c 	bl	200000c4 <_Z8osc_mainf>
200003cc:	edd4 7a01 	vldr	s15, [r4, #4]
200003d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
200003d4:	ee77 7a8a 	vadd.f32	s15, s15, s20
200003d8:	ee20 0a07 	vmul.f32	s0, s0, s14
		
		// wavefolder to main out
		const float wavefoldStage1 = (wavefold_audioIn < -0.5f) ? -1.f - wavefold_audioIn : (wavefold_audioIn >  0.5f) ? 1.f - wavefold_audioIn: wavefold_audioIn;
200003dc:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
		float fmOsc = osc_sinf(modulatorOscillator.phase);
		modulatorOscillator.phase += w1;
		modulatorOscillator.phase -= (uint32_t)modulatorOscillator.phase;
		
		// Main (carrier) Oscillator
        float wavefold_audioIn  = 0.5f * osc_main(carrierOscillator.phase) * (1.f + carrierOscillator.waveFold);
200003e0:	ee67 7a80 	vmul.f32	s15, s15, s0
		
		// wavefolder to main out
		const float wavefoldStage1 = (wavefold_audioIn < -0.5f) ? -1.f - wavefold_audioIn : (wavefold_audioIn >  0.5f) ? 1.f - wavefold_audioIn: wavefold_audioIn;
200003e4:	eef4 7ae6 	vcmpe.f32	s15, s13
200003e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003ec:	d504      	bpl.n	200003f8 <_hook_cycle+0x1d0>
200003ee:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
200003f2:	ee70 7a67 	vsub.f32	s15, s0, s15
200003f6:	e008      	b.n	2000040a <_hook_cycle+0x1e2>
200003f8:	eef4 7ac7 	vcmpe.f32	s15, s14
200003fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000400:	bfc4      	itt	gt
20000402:	eeb7 0a00 	vmovgt.f32	s0, #112	; 0x3f800000  1.0
20000406:	ee70 7a67 	vsubgt.f32	s15, s0, s15
		const float audioSignal = (wavefoldStage1 < -0.5f) ? -1.f - wavefoldStage1 : (wavefoldStage1 >  0.5f) ? 1.f - wavefoldStage1: wavefoldStage1;		
2000040a:	eef4 7ae6 	vcmpe.f32	s15, s13
2000040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000412:	d504      	bpl.n	2000041e <_hook_cycle+0x1f6>
20000414:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
20000418:	ee77 7a67 	vsub.f32	s15, s14, s15
2000041c:	e006      	b.n	2000042c <_hook_cycle+0x204>
2000041e:	eef4 7ac7 	vcmpe.f32	s15, s14
20000422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000426:	bfc8      	it	gt
20000428:	ee7a 7a67 	vsubgt.f32	s15, s20, s15
		
		//set carrier phase after modulation
		const float w0 = (f + ((fmOsc + lfo) * modulatorOscillator.fmDepth)) * k_samplerate_recipf; 

        //set phase position of wave
		carrierOscillator.phase += w0;
2000042c:	ed94 7a07 	vldr	s14, [r4, #28]
20000430:	ee3b 8a08 	vadd.f32	s16, s22, s16
20000434:	eef0 6a69 	vmov.f32	s13, s19
20000438:	eee8 6a07 	vfma.f32	s13, s16, s14
		carrierOscillator.phase -= (uint32_t)carrierOscillator.phase;		
		
		//fill buffer
		*(y++) = f32_to_q31(audioSignal);
2000043c:	ee67 7aab 	vmul.f32	s15, s15, s23
		
		//set carrier phase after modulation
		const float w0 = (f + ((fmOsc + lfo) * modulatorOscillator.fmDepth)) * k_samplerate_recipf; 

        //set phase position of wave
		carrierOscillator.phase += w0;
20000440:	eee6 8aaa 	vfma.f32	s17, s13, s21
		carrierOscillator.phase -= (uint32_t)carrierOscillator.phase;		
		
		//fill buffer
		*(y++) = f32_to_q31(audioSignal);
20000444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		//set carrier phase after modulation
		const float w0 = (f + ((fmOsc + lfo) * modulatorOscillator.fmDepth)) * k_samplerate_recipf; 

        //set phase position of wave
		carrierOscillator.phase += w0;
		carrierOscillator.phase -= (uint32_t)carrierOscillator.phase;		
20000448:	eebc 7ae8 	vcvt.u32.f32	s14, s17
		
		//fill buffer
		*(y++) = f32_to_q31(audioSignal);
2000044c:	ece5 7a01 	vstmia	r5!, {s15}
		//set carrier phase after modulation
		const float w0 = (f + ((fmOsc + lfo) * modulatorOscillator.fmDepth)) * k_samplerate_recipf; 

        //set phase position of wave
		carrierOscillator.phase += w0;
		carrierOscillator.phase -= (uint32_t)carrierOscillator.phase;		
20000450:	eeb8 7a47 	vcvt.f32.u32	s14, s14
20000454:	ee78 8ac7 	vsub.f32	s17, s17, s14
20000458:	edc4 8a00 	vstr	s17, [r4]
  
  //setting buffer
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;
  
	for (; y != y_e; ) {
2000045c:	e77d      	b.n	2000035a <_hook_cycle+0x132>
		carrierOscillator.phase -= (uint32_t)carrierOscillator.phase;		
		
		//fill buffer
		*(y++) = f32_to_q31(audioSignal);
  }
}
2000045e:	b003      	add	sp, #12
20000460:	ecbd 8b0a 	vpop	{d8-d12}
20000464:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000466:	bf00      	nop
20000468:	20001628 	.word	0x20001628
2000046c:	3b808081 	.word	0x3b808081
20000470:	0800f100 	.word	0x0800f100
20000474:	37aec33e 	.word	0x37aec33e
20000478:	43800000 	.word	0x43800000
2000047c:	4f000000 	.word	0x4f000000
20000480:	46b8ff49 	.word	0x46b8ff49
20000484:	08012bdc 	.word	0x08012bdc

20000488 <_hook_on>:
20000488:	4770      	bx	lr

2000048a <_hook_off>:

void OSC_NOTEON(const user_osc_param_t * const params) {
}

void OSC_NOTEOFF(const user_osc_param_t * const params) {
2000048a:	4770      	bx	lr

2000048c <_hook_param>:
  (void)params;
}

void OSC_PARAM(uint16_t index, uint16_t value) {
	  const float valf = param_val_to_f32(value);
2000048c:	ee07 1a90 	vmov	s15, r1
20000490:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 200004fc <_hook_param+0x70>
20000494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000498:	ee67 7a87 	vmul.f32	s15, s15, s14
	  
  switch (index) {
2000049c:	2807      	cmp	r0, #7
2000049e:	d82c      	bhi.n	200004fa <_hook_param+0x6e>
200004a0:	e8df f000 	tbb	[pc, r0]
200004a4:	100d0a04 	.word	0x100d0a04
200004a8:	241c1814 	.word	0x241c1814
  case k_user_osc_param_id1:
	carrierOscillator.octave = value * 12;
200004ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
200004b0:	4b13      	ldr	r3, [pc, #76]	; (20000500 <_hook_param+0x74>)
200004b2:	0089      	lsls	r1, r1, #2
200004b4:	7419      	strb	r1, [r3, #16]
	break;  
200004b6:	4770      	bx	lr
  case k_user_osc_param_id2:
	carrierOscillator.semitone = value;
200004b8:	4b11      	ldr	r3, [pc, #68]	; (20000500 <_hook_param+0x74>)
200004ba:	7459      	strb	r1, [r3, #17]
	break;
200004bc:	4770      	bx	lr
  case k_user_osc_param_id3:
	carrierOscillator.cent = value;
200004be:	4b10      	ldr	r3, [pc, #64]	; (20000500 <_hook_param+0x74>)
200004c0:	7499      	strb	r1, [r3, #18]
	break;
200004c2:	4770      	bx	lr
  case k_user_osc_param_id4:
	carrierOscillator.waveControl = valf;
200004c4:	4b0e      	ldr	r3, [pc, #56]	; (20000500 <_hook_param+0x74>)
200004c6:	edc3 7a03 	vstr	s15, [r3, #12]
	break;
200004ca:	4770      	bx	lr
  case k_user_osc_param_id5:
	modulatorOscillator.semitone = value;
200004cc:	4b0c      	ldr	r3, [pc, #48]	; (20000500 <_hook_param+0x74>)
200004ce:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
	break;
200004d2:	4770      	bx	lr
  case k_user_osc_param_id6:
	modulatorOscillator.cent = value;
200004d4:	4b0a      	ldr	r3, [pc, #40]	; (20000500 <_hook_param+0x74>)
200004d6:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
	break;	
200004da:	4770      	bx	lr
   case k_user_osc_param_shape:
	modulatorOscillator.fmDepth = value;
200004dc:	ee07 1a90 	vmov	s15, r1
200004e0:	4b07      	ldr	r3, [pc, #28]	; (20000500 <_hook_param+0x74>)
200004e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
200004e6:	edc3 7a07 	vstr	s15, [r3, #28]
    break;
200004ea:	4770      	bx	lr
  case k_user_osc_param_shiftshape:
    carrierOscillator.waveFold = valf * 5.f;
200004ec:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
200004f0:	ee67 7a87 	vmul.f32	s15, s15, s14
200004f4:	4b02      	ldr	r3, [pc, #8]	; (20000500 <_hook_param+0x74>)
200004f6:	edc3 7a01 	vstr	s15, [r3, #4]
200004fa:	4770      	bx	lr
200004fc:	3a802008 	.word	0x3a802008
20000500:	20001628 	.word	0x20001628

20000504 <__aeabi_drsub>:
20000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20000508:	e002      	b.n	20000510 <__adddf3>
2000050a:	bf00      	nop

2000050c <__aeabi_dsub>:
2000050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20000510 <__adddf3>:
20000510:	b530      	push	{r4, r5, lr}
20000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
20000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
2000051a:	ea94 0f05 	teq	r4, r5
2000051e:	bf08      	it	eq
20000520:	ea90 0f02 	teqeq	r0, r2
20000524:	bf1f      	itttt	ne
20000526:	ea54 0c00 	orrsne.w	ip, r4, r0
2000052a:	ea55 0c02 	orrsne.w	ip, r5, r2
2000052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20000536:	f000 80e2 	beq.w	200006fe <__adddf3+0x1ee>
2000053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
2000053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20000542:	bfb8      	it	lt
20000544:	426d      	neglt	r5, r5
20000546:	dd0c      	ble.n	20000562 <__adddf3+0x52>
20000548:	442c      	add	r4, r5
2000054a:	ea80 0202 	eor.w	r2, r0, r2
2000054e:	ea81 0303 	eor.w	r3, r1, r3
20000552:	ea82 0000 	eor.w	r0, r2, r0
20000556:	ea83 0101 	eor.w	r1, r3, r1
2000055a:	ea80 0202 	eor.w	r2, r0, r2
2000055e:	ea81 0303 	eor.w	r3, r1, r3
20000562:	2d36      	cmp	r5, #54	; 0x36
20000564:	bf88      	it	hi
20000566:	bd30      	pophi	{r4, r5, pc}
20000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
2000056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
20000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20000578:	d002      	beq.n	20000580 <__adddf3+0x70>
2000057a:	4240      	negs	r0, r0
2000057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
20000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
2000058c:	d002      	beq.n	20000594 <__adddf3+0x84>
2000058e:	4252      	negs	r2, r2
20000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000594:	ea94 0f05 	teq	r4, r5
20000598:	f000 80a7 	beq.w	200006ea <__adddf3+0x1da>
2000059c:	f1a4 0401 	sub.w	r4, r4, #1
200005a0:	f1d5 0e20 	rsbs	lr, r5, #32
200005a4:	db0d      	blt.n	200005c2 <__adddf3+0xb2>
200005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
200005aa:	fa22 f205 	lsr.w	r2, r2, r5
200005ae:	1880      	adds	r0, r0, r2
200005b0:	f141 0100 	adc.w	r1, r1, #0
200005b4:	fa03 f20e 	lsl.w	r2, r3, lr
200005b8:	1880      	adds	r0, r0, r2
200005ba:	fa43 f305 	asr.w	r3, r3, r5
200005be:	4159      	adcs	r1, r3
200005c0:	e00e      	b.n	200005e0 <__adddf3+0xd0>
200005c2:	f1a5 0520 	sub.w	r5, r5, #32
200005c6:	f10e 0e20 	add.w	lr, lr, #32
200005ca:	2a01      	cmp	r2, #1
200005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
200005d0:	bf28      	it	cs
200005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
200005d6:	fa43 f305 	asr.w	r3, r3, r5
200005da:	18c0      	adds	r0, r0, r3
200005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
200005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200005e4:	d507      	bpl.n	200005f6 <__adddf3+0xe6>
200005e6:	f04f 0e00 	mov.w	lr, #0
200005ea:	f1dc 0c00 	rsbs	ip, ip, #0
200005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
200005f2:	eb6e 0101 	sbc.w	r1, lr, r1
200005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
200005fa:	d31b      	bcc.n	20000634 <__adddf3+0x124>
200005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20000600:	d30c      	bcc.n	2000061c <__adddf3+0x10c>
20000602:	0849      	lsrs	r1, r1, #1
20000604:	ea5f 0030 	movs.w	r0, r0, rrx
20000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
2000060c:	f104 0401 	add.w	r4, r4, #1
20000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
20000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20000618:	f080 809a 	bcs.w	20000750 <__adddf3+0x240>
2000061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20000620:	bf08      	it	eq
20000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20000626:	f150 0000 	adcs.w	r0, r0, #0
2000062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000062e:	ea41 0105 	orr.w	r1, r1, r5
20000632:	bd30      	pop	{r4, r5, pc}
20000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20000638:	4140      	adcs	r0, r0
2000063a:	eb41 0101 	adc.w	r1, r1, r1
2000063e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20000642:	f1a4 0401 	sub.w	r4, r4, #1
20000646:	d1e9      	bne.n	2000061c <__adddf3+0x10c>
20000648:	f091 0f00 	teq	r1, #0
2000064c:	bf04      	itt	eq
2000064e:	4601      	moveq	r1, r0
20000650:	2000      	moveq	r0, #0
20000652:	fab1 f381 	clz	r3, r1
20000656:	bf08      	it	eq
20000658:	3320      	addeq	r3, #32
2000065a:	f1a3 030b 	sub.w	r3, r3, #11
2000065e:	f1b3 0220 	subs.w	r2, r3, #32
20000662:	da0c      	bge.n	2000067e <__adddf3+0x16e>
20000664:	320c      	adds	r2, #12
20000666:	dd08      	ble.n	2000067a <__adddf3+0x16a>
20000668:	f102 0c14 	add.w	ip, r2, #20
2000066c:	f1c2 020c 	rsb	r2, r2, #12
20000670:	fa01 f00c 	lsl.w	r0, r1, ip
20000674:	fa21 f102 	lsr.w	r1, r1, r2
20000678:	e00c      	b.n	20000694 <__adddf3+0x184>
2000067a:	f102 0214 	add.w	r2, r2, #20
2000067e:	bfd8      	it	le
20000680:	f1c2 0c20 	rsble	ip, r2, #32
20000684:	fa01 f102 	lsl.w	r1, r1, r2
20000688:	fa20 fc0c 	lsr.w	ip, r0, ip
2000068c:	bfdc      	itt	le
2000068e:	ea41 010c 	orrle.w	r1, r1, ip
20000692:	4090      	lslle	r0, r2
20000694:	1ae4      	subs	r4, r4, r3
20000696:	bfa2      	ittt	ge
20000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
2000069c:	4329      	orrge	r1, r5
2000069e:	bd30      	popge	{r4, r5, pc}
200006a0:	ea6f 0404 	mvn.w	r4, r4
200006a4:	3c1f      	subs	r4, #31
200006a6:	da1c      	bge.n	200006e2 <__adddf3+0x1d2>
200006a8:	340c      	adds	r4, #12
200006aa:	dc0e      	bgt.n	200006ca <__adddf3+0x1ba>
200006ac:	f104 0414 	add.w	r4, r4, #20
200006b0:	f1c4 0220 	rsb	r2, r4, #32
200006b4:	fa20 f004 	lsr.w	r0, r0, r4
200006b8:	fa01 f302 	lsl.w	r3, r1, r2
200006bc:	ea40 0003 	orr.w	r0, r0, r3
200006c0:	fa21 f304 	lsr.w	r3, r1, r4
200006c4:	ea45 0103 	orr.w	r1, r5, r3
200006c8:	bd30      	pop	{r4, r5, pc}
200006ca:	f1c4 040c 	rsb	r4, r4, #12
200006ce:	f1c4 0220 	rsb	r2, r4, #32
200006d2:	fa20 f002 	lsr.w	r0, r0, r2
200006d6:	fa01 f304 	lsl.w	r3, r1, r4
200006da:	ea40 0003 	orr.w	r0, r0, r3
200006de:	4629      	mov	r1, r5
200006e0:	bd30      	pop	{r4, r5, pc}
200006e2:	fa21 f004 	lsr.w	r0, r1, r4
200006e6:	4629      	mov	r1, r5
200006e8:	bd30      	pop	{r4, r5, pc}
200006ea:	f094 0f00 	teq	r4, #0
200006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
200006f2:	bf06      	itte	eq
200006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
200006f8:	3401      	addeq	r4, #1
200006fa:	3d01      	subne	r5, #1
200006fc:	e74e      	b.n	2000059c <__adddf3+0x8c>
200006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20000702:	bf18      	it	ne
20000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20000708:	d029      	beq.n	2000075e <__adddf3+0x24e>
2000070a:	ea94 0f05 	teq	r4, r5
2000070e:	bf08      	it	eq
20000710:	ea90 0f02 	teqeq	r0, r2
20000714:	d005      	beq.n	20000722 <__adddf3+0x212>
20000716:	ea54 0c00 	orrs.w	ip, r4, r0
2000071a:	bf04      	itt	eq
2000071c:	4619      	moveq	r1, r3
2000071e:	4610      	moveq	r0, r2
20000720:	bd30      	pop	{r4, r5, pc}
20000722:	ea91 0f03 	teq	r1, r3
20000726:	bf1e      	ittt	ne
20000728:	2100      	movne	r1, #0
2000072a:	2000      	movne	r0, #0
2000072c:	bd30      	popne	{r4, r5, pc}
2000072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20000732:	d105      	bne.n	20000740 <__adddf3+0x230>
20000734:	0040      	lsls	r0, r0, #1
20000736:	4149      	adcs	r1, r1
20000738:	bf28      	it	cs
2000073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000073e:	bd30      	pop	{r4, r5, pc}
20000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20000744:	bf3c      	itt	cc
20000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2000074a:	bd30      	popcc	{r4, r5, pc}
2000074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20000758:	f04f 0000 	mov.w	r0, #0
2000075c:	bd30      	pop	{r4, r5, pc}
2000075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20000762:	bf1a      	itte	ne
20000764:	4619      	movne	r1, r3
20000766:	4610      	movne	r0, r2
20000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
2000076c:	bf1c      	itt	ne
2000076e:	460b      	movne	r3, r1
20000770:	4602      	movne	r2, r0
20000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20000776:	bf06      	itte	eq
20000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
2000077c:	ea91 0f03 	teqeq	r1, r3
20000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20000784:	bd30      	pop	{r4, r5, pc}
20000786:	bf00      	nop

20000788 <__aeabi_ui2d>:
20000788:	f090 0f00 	teq	r0, #0
2000078c:	bf04      	itt	eq
2000078e:	2100      	moveq	r1, #0
20000790:	4770      	bxeq	lr
20000792:	b530      	push	{r4, r5, lr}
20000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000079c:	f04f 0500 	mov.w	r5, #0
200007a0:	f04f 0100 	mov.w	r1, #0
200007a4:	e750      	b.n	20000648 <__adddf3+0x138>
200007a6:	bf00      	nop

200007a8 <__aeabi_i2d>:
200007a8:	f090 0f00 	teq	r0, #0
200007ac:	bf04      	itt	eq
200007ae:	2100      	moveq	r1, #0
200007b0:	4770      	bxeq	lr
200007b2:	b530      	push	{r4, r5, lr}
200007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
200007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
200007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
200007c0:	bf48      	it	mi
200007c2:	4240      	negmi	r0, r0
200007c4:	f04f 0100 	mov.w	r1, #0
200007c8:	e73e      	b.n	20000648 <__adddf3+0x138>
200007ca:	bf00      	nop

200007cc <__aeabi_f2d>:
200007cc:	0042      	lsls	r2, r0, #1
200007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
200007d2:	ea4f 0131 	mov.w	r1, r1, rrx
200007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
200007da:	bf1f      	itttt	ne
200007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
200007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
200007e8:	4770      	bxne	lr
200007ea:	f092 0f00 	teq	r2, #0
200007ee:	bf14      	ite	ne
200007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200007f4:	4770      	bxeq	lr
200007f6:	b530      	push	{r4, r5, lr}
200007f8:	f44f 7460 	mov.w	r4, #896	; 0x380
200007fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20000804:	e720      	b.n	20000648 <__adddf3+0x138>
20000806:	bf00      	nop

20000808 <__aeabi_ul2d>:
20000808:	ea50 0201 	orrs.w	r2, r0, r1
2000080c:	bf08      	it	eq
2000080e:	4770      	bxeq	lr
20000810:	b530      	push	{r4, r5, lr}
20000812:	f04f 0500 	mov.w	r5, #0
20000816:	e00a      	b.n	2000082e <__aeabi_l2d+0x16>

20000818 <__aeabi_l2d>:
20000818:	ea50 0201 	orrs.w	r2, r0, r1
2000081c:	bf08      	it	eq
2000081e:	4770      	bxeq	lr
20000820:	b530      	push	{r4, r5, lr}
20000822:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20000826:	d502      	bpl.n	2000082e <__aeabi_l2d+0x16>
20000828:	4240      	negs	r0, r0
2000082a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000082e:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000832:	f104 0432 	add.w	r4, r4, #50	; 0x32
20000836:	ea5f 5c91 	movs.w	ip, r1, lsr #22
2000083a:	f43f aedc 	beq.w	200005f6 <__adddf3+0xe6>
2000083e:	f04f 0203 	mov.w	r2, #3
20000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20000846:	bf18      	it	ne
20000848:	3203      	addne	r2, #3
2000084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000084e:	bf18      	it	ne
20000850:	3203      	addne	r2, #3
20000852:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20000856:	f1c2 0320 	rsb	r3, r2, #32
2000085a:	fa00 fc03 	lsl.w	ip, r0, r3
2000085e:	fa20 f002 	lsr.w	r0, r0, r2
20000862:	fa01 fe03 	lsl.w	lr, r1, r3
20000866:	ea40 000e 	orr.w	r0, r0, lr
2000086a:	fa21 f102 	lsr.w	r1, r1, r2
2000086e:	4414      	add	r4, r2
20000870:	e6c1      	b.n	200005f6 <__adddf3+0xe6>
20000872:	bf00      	nop

20000874 <__aeabi_dmul>:
20000874:	b570      	push	{r4, r5, r6, lr}
20000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
2000087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20000882:	bf1d      	ittte	ne
20000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20000888:	ea94 0f0c 	teqne	r4, ip
2000088c:	ea95 0f0c 	teqne	r5, ip
20000890:	f000 f8de 	bleq	20000a50 <__aeabi_dmul+0x1dc>
20000894:	442c      	add	r4, r5
20000896:	ea81 0603 	eor.w	r6, r1, r3
2000089a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
2000089e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
200008a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
200008a6:	bf18      	it	ne
200008a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
200008ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200008b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
200008b4:	d038      	beq.n	20000928 <__aeabi_dmul+0xb4>
200008b6:	fba0 ce02 	umull	ip, lr, r0, r2
200008ba:	f04f 0500 	mov.w	r5, #0
200008be:	fbe1 e502 	umlal	lr, r5, r1, r2
200008c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
200008c6:	fbe0 e503 	umlal	lr, r5, r0, r3
200008ca:	f04f 0600 	mov.w	r6, #0
200008ce:	fbe1 5603 	umlal	r5, r6, r1, r3
200008d2:	f09c 0f00 	teq	ip, #0
200008d6:	bf18      	it	ne
200008d8:	f04e 0e01 	orrne.w	lr, lr, #1
200008dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
200008e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
200008e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
200008e8:	d204      	bcs.n	200008f4 <__aeabi_dmul+0x80>
200008ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
200008ee:	416d      	adcs	r5, r5
200008f0:	eb46 0606 	adc.w	r6, r6, r6
200008f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
200008f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
200008fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20000900:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20000904:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20000908:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
2000090c:	bf88      	it	hi
2000090e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20000912:	d81e      	bhi.n	20000952 <__aeabi_dmul+0xde>
20000914:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20000918:	bf08      	it	eq
2000091a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
2000091e:	f150 0000 	adcs.w	r0, r0, #0
20000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20000926:	bd70      	pop	{r4, r5, r6, pc}
20000928:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
2000092c:	ea46 0101 	orr.w	r1, r6, r1
20000930:	ea40 0002 	orr.w	r0, r0, r2
20000934:	ea81 0103 	eor.w	r1, r1, r3
20000938:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
2000093c:	bfc2      	ittt	gt
2000093e:	ebd4 050c 	rsbsgt	r5, r4, ip
20000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20000946:	bd70      	popgt	{r4, r5, r6, pc}
20000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
2000094c:	f04f 0e00 	mov.w	lr, #0
20000950:	3c01      	subs	r4, #1
20000952:	f300 80ab 	bgt.w	20000aac <__aeabi_dmul+0x238>
20000956:	f114 0f36 	cmn.w	r4, #54	; 0x36
2000095a:	bfde      	ittt	le
2000095c:	2000      	movle	r0, #0
2000095e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20000962:	bd70      	pople	{r4, r5, r6, pc}
20000964:	f1c4 0400 	rsb	r4, r4, #0
20000968:	3c20      	subs	r4, #32
2000096a:	da35      	bge.n	200009d8 <__aeabi_dmul+0x164>
2000096c:	340c      	adds	r4, #12
2000096e:	dc1b      	bgt.n	200009a8 <__aeabi_dmul+0x134>
20000970:	f104 0414 	add.w	r4, r4, #20
20000974:	f1c4 0520 	rsb	r5, r4, #32
20000978:	fa00 f305 	lsl.w	r3, r0, r5
2000097c:	fa20 f004 	lsr.w	r0, r0, r4
20000980:	fa01 f205 	lsl.w	r2, r1, r5
20000984:	ea40 0002 	orr.w	r0, r0, r2
20000988:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
2000098c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20000990:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20000994:	fa21 f604 	lsr.w	r6, r1, r4
20000998:	eb42 0106 	adc.w	r1, r2, r6
2000099c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200009a0:	bf08      	it	eq
200009a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200009a6:	bd70      	pop	{r4, r5, r6, pc}
200009a8:	f1c4 040c 	rsb	r4, r4, #12
200009ac:	f1c4 0520 	rsb	r5, r4, #32
200009b0:	fa00 f304 	lsl.w	r3, r0, r4
200009b4:	fa20 f005 	lsr.w	r0, r0, r5
200009b8:	fa01 f204 	lsl.w	r2, r1, r4
200009bc:	ea40 0002 	orr.w	r0, r0, r2
200009c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200009c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200009c8:	f141 0100 	adc.w	r1, r1, #0
200009cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200009d0:	bf08      	it	eq
200009d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200009d6:	bd70      	pop	{r4, r5, r6, pc}
200009d8:	f1c4 0520 	rsb	r5, r4, #32
200009dc:	fa00 f205 	lsl.w	r2, r0, r5
200009e0:	ea4e 0e02 	orr.w	lr, lr, r2
200009e4:	fa20 f304 	lsr.w	r3, r0, r4
200009e8:	fa01 f205 	lsl.w	r2, r1, r5
200009ec:	ea43 0302 	orr.w	r3, r3, r2
200009f0:	fa21 f004 	lsr.w	r0, r1, r4
200009f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200009f8:	fa21 f204 	lsr.w	r2, r1, r4
200009fc:	ea20 0002 	bic.w	r0, r0, r2
20000a00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20000a04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20000a08:	bf08      	it	eq
20000a0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20000a0e:	bd70      	pop	{r4, r5, r6, pc}
20000a10:	f094 0f00 	teq	r4, #0
20000a14:	d10f      	bne.n	20000a36 <__aeabi_dmul+0x1c2>
20000a16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
20000a1a:	0040      	lsls	r0, r0, #1
20000a1c:	eb41 0101 	adc.w	r1, r1, r1
20000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20000a24:	bf08      	it	eq
20000a26:	3c01      	subeq	r4, #1
20000a28:	d0f7      	beq.n	20000a1a <__aeabi_dmul+0x1a6>
20000a2a:	ea41 0106 	orr.w	r1, r1, r6
20000a2e:	f095 0f00 	teq	r5, #0
20000a32:	bf18      	it	ne
20000a34:	4770      	bxne	lr
20000a36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
20000a3a:	0052      	lsls	r2, r2, #1
20000a3c:	eb43 0303 	adc.w	r3, r3, r3
20000a40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20000a44:	bf08      	it	eq
20000a46:	3d01      	subeq	r5, #1
20000a48:	d0f7      	beq.n	20000a3a <__aeabi_dmul+0x1c6>
20000a4a:	ea43 0306 	orr.w	r3, r3, r6
20000a4e:	4770      	bx	lr
20000a50:	ea94 0f0c 	teq	r4, ip
20000a54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20000a58:	bf18      	it	ne
20000a5a:	ea95 0f0c 	teqne	r5, ip
20000a5e:	d00c      	beq.n	20000a7a <__aeabi_dmul+0x206>
20000a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20000a64:	bf18      	it	ne
20000a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20000a6a:	d1d1      	bne.n	20000a10 <__aeabi_dmul+0x19c>
20000a6c:	ea81 0103 	eor.w	r1, r1, r3
20000a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20000a74:	f04f 0000 	mov.w	r0, #0
20000a78:	bd70      	pop	{r4, r5, r6, pc}
20000a7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20000a7e:	bf06      	itte	eq
20000a80:	4610      	moveq	r0, r2
20000a82:	4619      	moveq	r1, r3
20000a84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20000a88:	d019      	beq.n	20000abe <__aeabi_dmul+0x24a>
20000a8a:	ea94 0f0c 	teq	r4, ip
20000a8e:	d102      	bne.n	20000a96 <__aeabi_dmul+0x222>
20000a90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
20000a94:	d113      	bne.n	20000abe <__aeabi_dmul+0x24a>
20000a96:	ea95 0f0c 	teq	r5, ip
20000a9a:	d105      	bne.n	20000aa8 <__aeabi_dmul+0x234>
20000a9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
20000aa0:	bf1c      	itt	ne
20000aa2:	4610      	movne	r0, r2
20000aa4:	4619      	movne	r1, r3
20000aa6:	d10a      	bne.n	20000abe <__aeabi_dmul+0x24a>
20000aa8:	ea81 0103 	eor.w	r1, r1, r3
20000aac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20000ab0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20000ab4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20000ab8:	f04f 0000 	mov.w	r0, #0
20000abc:	bd70      	pop	{r4, r5, r6, pc}
20000abe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20000ac2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
20000ac6:	bd70      	pop	{r4, r5, r6, pc}

20000ac8 <__aeabi_ddiv>:
20000ac8:	b570      	push	{r4, r5, r6, lr}
20000aca:	f04f 0cff 	mov.w	ip, #255	; 0xff
20000ace:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20000ad2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20000ad6:	bf1d      	ittte	ne
20000ad8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20000adc:	ea94 0f0c 	teqne	r4, ip
20000ae0:	ea95 0f0c 	teqne	r5, ip
20000ae4:	f000 f8a7 	bleq	20000c36 <__aeabi_ddiv+0x16e>
20000ae8:	eba4 0405 	sub.w	r4, r4, r5
20000aec:	ea81 0e03 	eor.w	lr, r1, r3
20000af0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20000af4:	ea4f 3101 	mov.w	r1, r1, lsl #12
20000af8:	f000 8088 	beq.w	20000c0c <__aeabi_ddiv+0x144>
20000afc:	ea4f 3303 	mov.w	r3, r3, lsl #12
20000b00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20000b04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
20000b08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20000b0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
20000b10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
20000b14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
20000b18:	ea4f 2600 	mov.w	r6, r0, lsl #8
20000b1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20000b20:	429d      	cmp	r5, r3
20000b22:	bf08      	it	eq
20000b24:	4296      	cmpeq	r6, r2
20000b26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
20000b2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
20000b2e:	d202      	bcs.n	20000b36 <__aeabi_ddiv+0x6e>
20000b30:	085b      	lsrs	r3, r3, #1
20000b32:	ea4f 0232 	mov.w	r2, r2, rrx
20000b36:	1ab6      	subs	r6, r6, r2
20000b38:	eb65 0503 	sbc.w	r5, r5, r3
20000b3c:	085b      	lsrs	r3, r3, #1
20000b3e:	ea4f 0232 	mov.w	r2, r2, rrx
20000b42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20000b46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
20000b4a:	ebb6 0e02 	subs.w	lr, r6, r2
20000b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
20000b52:	bf22      	ittt	cs
20000b54:	1ab6      	subcs	r6, r6, r2
20000b56:	4675      	movcs	r5, lr
20000b58:	ea40 000c 	orrcs.w	r0, r0, ip
20000b5c:	085b      	lsrs	r3, r3, #1
20000b5e:	ea4f 0232 	mov.w	r2, r2, rrx
20000b62:	ebb6 0e02 	subs.w	lr, r6, r2
20000b66:	eb75 0e03 	sbcs.w	lr, r5, r3
20000b6a:	bf22      	ittt	cs
20000b6c:	1ab6      	subcs	r6, r6, r2
20000b6e:	4675      	movcs	r5, lr
20000b70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20000b74:	085b      	lsrs	r3, r3, #1
20000b76:	ea4f 0232 	mov.w	r2, r2, rrx
20000b7a:	ebb6 0e02 	subs.w	lr, r6, r2
20000b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
20000b82:	bf22      	ittt	cs
20000b84:	1ab6      	subcs	r6, r6, r2
20000b86:	4675      	movcs	r5, lr
20000b88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20000b8c:	085b      	lsrs	r3, r3, #1
20000b8e:	ea4f 0232 	mov.w	r2, r2, rrx
20000b92:	ebb6 0e02 	subs.w	lr, r6, r2
20000b96:	eb75 0e03 	sbcs.w	lr, r5, r3
20000b9a:	bf22      	ittt	cs
20000b9c:	1ab6      	subcs	r6, r6, r2
20000b9e:	4675      	movcs	r5, lr
20000ba0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20000ba4:	ea55 0e06 	orrs.w	lr, r5, r6
20000ba8:	d018      	beq.n	20000bdc <__aeabi_ddiv+0x114>
20000baa:	ea4f 1505 	mov.w	r5, r5, lsl #4
20000bae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
20000bb2:	ea4f 1606 	mov.w	r6, r6, lsl #4
20000bb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000bba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
20000bbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20000bc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
20000bc6:	d1c0      	bne.n	20000b4a <__aeabi_ddiv+0x82>
20000bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20000bcc:	d10b      	bne.n	20000be6 <__aeabi_ddiv+0x11e>
20000bce:	ea41 0100 	orr.w	r1, r1, r0
20000bd2:	f04f 0000 	mov.w	r0, #0
20000bd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
20000bda:	e7b6      	b.n	20000b4a <__aeabi_ddiv+0x82>
20000bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20000be0:	bf04      	itt	eq
20000be2:	4301      	orreq	r1, r0
20000be4:	2000      	moveq	r0, #0
20000be6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20000bea:	bf88      	it	hi
20000bec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20000bf0:	f63f aeaf 	bhi.w	20000952 <__aeabi_dmul+0xde>
20000bf4:	ebb5 0c03 	subs.w	ip, r5, r3
20000bf8:	bf04      	itt	eq
20000bfa:	ebb6 0c02 	subseq.w	ip, r6, r2
20000bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20000c02:	f150 0000 	adcs.w	r0, r0, #0
20000c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20000c0a:	bd70      	pop	{r4, r5, r6, pc}
20000c0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
20000c10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
20000c14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
20000c18:	bfc2      	ittt	gt
20000c1a:	ebd4 050c 	rsbsgt	r5, r4, ip
20000c1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20000c22:	bd70      	popgt	{r4, r5, r6, pc}
20000c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20000c28:	f04f 0e00 	mov.w	lr, #0
20000c2c:	3c01      	subs	r4, #1
20000c2e:	e690      	b.n	20000952 <__aeabi_dmul+0xde>
20000c30:	ea45 0e06 	orr.w	lr, r5, r6
20000c34:	e68d      	b.n	20000952 <__aeabi_dmul+0xde>
20000c36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20000c3a:	ea94 0f0c 	teq	r4, ip
20000c3e:	bf08      	it	eq
20000c40:	ea95 0f0c 	teqeq	r5, ip
20000c44:	f43f af3b 	beq.w	20000abe <__aeabi_dmul+0x24a>
20000c48:	ea94 0f0c 	teq	r4, ip
20000c4c:	d10a      	bne.n	20000c64 <__aeabi_ddiv+0x19c>
20000c4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20000c52:	f47f af34 	bne.w	20000abe <__aeabi_dmul+0x24a>
20000c56:	ea95 0f0c 	teq	r5, ip
20000c5a:	f47f af25 	bne.w	20000aa8 <__aeabi_dmul+0x234>
20000c5e:	4610      	mov	r0, r2
20000c60:	4619      	mov	r1, r3
20000c62:	e72c      	b.n	20000abe <__aeabi_dmul+0x24a>
20000c64:	ea95 0f0c 	teq	r5, ip
20000c68:	d106      	bne.n	20000c78 <__aeabi_ddiv+0x1b0>
20000c6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20000c6e:	f43f aefd 	beq.w	20000a6c <__aeabi_dmul+0x1f8>
20000c72:	4610      	mov	r0, r2
20000c74:	4619      	mov	r1, r3
20000c76:	e722      	b.n	20000abe <__aeabi_dmul+0x24a>
20000c78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20000c7c:	bf18      	it	ne
20000c7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20000c82:	f47f aec5 	bne.w	20000a10 <__aeabi_dmul+0x19c>
20000c86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
20000c8a:	f47f af0d 	bne.w	20000aa8 <__aeabi_dmul+0x234>
20000c8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
20000c92:	f47f aeeb 	bne.w	20000a6c <__aeabi_dmul+0x1f8>
20000c96:	e712      	b.n	20000abe <__aeabi_dmul+0x24a>

20000c98 <__gedf2>:
20000c98:	f04f 3cff 	mov.w	ip, #4294967295
20000c9c:	e006      	b.n	20000cac <__cmpdf2+0x4>
20000c9e:	bf00      	nop

20000ca0 <__ledf2>:
20000ca0:	f04f 0c01 	mov.w	ip, #1
20000ca4:	e002      	b.n	20000cac <__cmpdf2+0x4>
20000ca6:	bf00      	nop

20000ca8 <__cmpdf2>:
20000ca8:	f04f 0c01 	mov.w	ip, #1
20000cac:	f84d cd04 	str.w	ip, [sp, #-4]!
20000cb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20000cb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000cb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20000cbc:	bf18      	it	ne
20000cbe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
20000cc2:	d01b      	beq.n	20000cfc <__cmpdf2+0x54>
20000cc4:	b001      	add	sp, #4
20000cc6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
20000cca:	bf0c      	ite	eq
20000ccc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
20000cd0:	ea91 0f03 	teqne	r1, r3
20000cd4:	bf02      	ittt	eq
20000cd6:	ea90 0f02 	teqeq	r0, r2
20000cda:	2000      	moveq	r0, #0
20000cdc:	4770      	bxeq	lr
20000cde:	f110 0f00 	cmn.w	r0, #0
20000ce2:	ea91 0f03 	teq	r1, r3
20000ce6:	bf58      	it	pl
20000ce8:	4299      	cmppl	r1, r3
20000cea:	bf08      	it	eq
20000cec:	4290      	cmpeq	r0, r2
20000cee:	bf2c      	ite	cs
20000cf0:	17d8      	asrcs	r0, r3, #31
20000cf2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
20000cf6:	f040 0001 	orr.w	r0, r0, #1
20000cfa:	4770      	bx	lr
20000cfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20000d00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000d04:	d102      	bne.n	20000d0c <__cmpdf2+0x64>
20000d06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
20000d0a:	d107      	bne.n	20000d1c <__cmpdf2+0x74>
20000d0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20000d10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000d14:	d1d6      	bne.n	20000cc4 <__cmpdf2+0x1c>
20000d16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
20000d1a:	d0d3      	beq.n	20000cc4 <__cmpdf2+0x1c>
20000d1c:	f85d 0b04 	ldr.w	r0, [sp], #4
20000d20:	4770      	bx	lr
20000d22:	bf00      	nop

20000d24 <__aeabi_cdrcmple>:
20000d24:	4684      	mov	ip, r0
20000d26:	4610      	mov	r0, r2
20000d28:	4662      	mov	r2, ip
20000d2a:	468c      	mov	ip, r1
20000d2c:	4619      	mov	r1, r3
20000d2e:	4663      	mov	r3, ip
20000d30:	e000      	b.n	20000d34 <__aeabi_cdcmpeq>
20000d32:	bf00      	nop

20000d34 <__aeabi_cdcmpeq>:
20000d34:	b501      	push	{r0, lr}
20000d36:	f7ff ffb7 	bl	20000ca8 <__cmpdf2>
20000d3a:	2800      	cmp	r0, #0
20000d3c:	bf48      	it	mi
20000d3e:	f110 0f00 	cmnmi.w	r0, #0
20000d42:	bd01      	pop	{r0, pc}

20000d44 <__aeabi_dcmpeq>:
20000d44:	f84d ed08 	str.w	lr, [sp, #-8]!
20000d48:	f7ff fff4 	bl	20000d34 <__aeabi_cdcmpeq>
20000d4c:	bf0c      	ite	eq
20000d4e:	2001      	moveq	r0, #1
20000d50:	2000      	movne	r0, #0
20000d52:	f85d fb08 	ldr.w	pc, [sp], #8
20000d56:	bf00      	nop

20000d58 <__aeabi_dcmplt>:
20000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
20000d5c:	f7ff ffea 	bl	20000d34 <__aeabi_cdcmpeq>
20000d60:	bf34      	ite	cc
20000d62:	2001      	movcc	r0, #1
20000d64:	2000      	movcs	r0, #0
20000d66:	f85d fb08 	ldr.w	pc, [sp], #8
20000d6a:	bf00      	nop

20000d6c <__aeabi_dcmple>:
20000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
20000d70:	f7ff ffe0 	bl	20000d34 <__aeabi_cdcmpeq>
20000d74:	bf94      	ite	ls
20000d76:	2001      	movls	r0, #1
20000d78:	2000      	movhi	r0, #0
20000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
20000d7e:	bf00      	nop

20000d80 <__aeabi_dcmpge>:
20000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
20000d84:	f7ff ffce 	bl	20000d24 <__aeabi_cdrcmple>
20000d88:	bf94      	ite	ls
20000d8a:	2001      	movls	r0, #1
20000d8c:	2000      	movhi	r0, #0
20000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
20000d92:	bf00      	nop

20000d94 <__aeabi_dcmpgt>:
20000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
20000d98:	f7ff ffc4 	bl	20000d24 <__aeabi_cdrcmple>
20000d9c:	bf34      	ite	cc
20000d9e:	2001      	movcc	r0, #1
20000da0:	2000      	movcs	r0, #0
20000da2:	f85d fb08 	ldr.w	pc, [sp], #8
20000da6:	bf00      	nop

20000da8 <__aeabi_dcmpun>:
20000da8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20000dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000db0:	d102      	bne.n	20000db8 <__aeabi_dcmpun+0x10>
20000db2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
20000db6:	d10a      	bne.n	20000dce <__aeabi_dcmpun+0x26>
20000db8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20000dbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20000dc0:	d102      	bne.n	20000dc8 <__aeabi_dcmpun+0x20>
20000dc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
20000dc6:	d102      	bne.n	20000dce <__aeabi_dcmpun+0x26>
20000dc8:	f04f 0000 	mov.w	r0, #0
20000dcc:	4770      	bx	lr
20000dce:	f04f 0001 	mov.w	r0, #1
20000dd2:	4770      	bx	lr

20000dd4 <__aeabi_d2f>:
20000dd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
20000dd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
20000ddc:	bf24      	itt	cs
20000dde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
20000de2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
20000de6:	d90d      	bls.n	20000e04 <__aeabi_d2f+0x30>
20000de8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20000dec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
20000df0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
20000df4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
20000df8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
20000dfc:	bf08      	it	eq
20000dfe:	f020 0001 	biceq.w	r0, r0, #1
20000e02:	4770      	bx	lr
20000e04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
20000e08:	d121      	bne.n	20000e4e <__aeabi_d2f+0x7a>
20000e0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
20000e0e:	bfbc      	itt	lt
20000e10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
20000e14:	4770      	bxlt	lr
20000e16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20000e1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
20000e1e:	f1c2 0218 	rsb	r2, r2, #24
20000e22:	f1c2 0c20 	rsb	ip, r2, #32
20000e26:	fa10 f30c 	lsls.w	r3, r0, ip
20000e2a:	fa20 f002 	lsr.w	r0, r0, r2
20000e2e:	bf18      	it	ne
20000e30:	f040 0001 	orrne.w	r0, r0, #1
20000e34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20000e38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
20000e3c:	fa03 fc0c 	lsl.w	ip, r3, ip
20000e40:	ea40 000c 	orr.w	r0, r0, ip
20000e44:	fa23 f302 	lsr.w	r3, r3, r2
20000e48:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000e4c:	e7cc      	b.n	20000de8 <__aeabi_d2f+0x14>
20000e4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
20000e52:	d107      	bne.n	20000e64 <__aeabi_d2f+0x90>
20000e54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
20000e58:	bf1e      	ittt	ne
20000e5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
20000e5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
20000e62:	4770      	bxne	lr
20000e64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
20000e68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20000e6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20000e70:	4770      	bx	lr
20000e72:	bf00      	nop

20000e74 <fmod>:
20000e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
20000e78:	ed2d 8b02 	vpush	{d8}
20000e7c:	b08b      	sub	sp, #44	; 0x2c
20000e7e:	ec57 6b10 	vmov	r6, r7, d0
20000e82:	ec55 4b11 	vmov	r4, r5, d1
20000e86:	f000 f861 	bl	20000f4c <__ieee754_fmod>
20000e8a:	4b2e      	ldr	r3, [pc, #184]	; (20000f44 <fmod+0xd0>)
20000e8c:	eeb0 8a40 	vmov.f32	s16, s0
20000e90:	eef0 8a60 	vmov.f32	s17, s1
20000e94:	f993 8000 	ldrsb.w	r8, [r3]
20000e98:	f1b8 3fff 	cmp.w	r8, #4294967295
20000e9c:	d031      	beq.n	20000f02 <fmod+0x8e>
20000e9e:	4622      	mov	r2, r4
20000ea0:	462b      	mov	r3, r5
20000ea2:	4620      	mov	r0, r4
20000ea4:	4629      	mov	r1, r5
20000ea6:	f7ff ff7f 	bl	20000da8 <__aeabi_dcmpun>
20000eaa:	bb50      	cbnz	r0, 20000f02 <fmod+0x8e>
20000eac:	4632      	mov	r2, r6
20000eae:	463b      	mov	r3, r7
20000eb0:	4630      	mov	r0, r6
20000eb2:	4639      	mov	r1, r7
20000eb4:	f7ff ff78 	bl	20000da8 <__aeabi_dcmpun>
20000eb8:	4681      	mov	r9, r0
20000eba:	bb10      	cbnz	r0, 20000f02 <fmod+0x8e>
20000ebc:	2200      	movs	r2, #0
20000ebe:	2300      	movs	r3, #0
20000ec0:	4620      	mov	r0, r4
20000ec2:	4629      	mov	r1, r5
20000ec4:	f7ff ff3e 	bl	20000d44 <__aeabi_dcmpeq>
20000ec8:	b1d8      	cbz	r0, 20000f02 <fmod+0x8e>
20000eca:	4b1f      	ldr	r3, [pc, #124]	; (20000f48 <fmod+0xd4>)
20000ecc:	f8cd 9020 	str.w	r9, [sp, #32]
20000ed0:	2201      	movs	r2, #1
20000ed2:	e9cd 6702 	strd	r6, r7, [sp, #8]
20000ed6:	e9cd 4504 	strd	r4, r5, [sp, #16]
20000eda:	e88d 000c 	stmia.w	sp, {r2, r3}
20000ede:	f1b8 0f00 	cmp.w	r8, #0
20000ee2:	d117      	bne.n	20000f14 <fmod+0xa0>
20000ee4:	e9cd 6706 	strd	r6, r7, [sp, #24]
20000ee8:	4668      	mov	r0, sp
20000eea:	f000 f969 	bl	200011c0 <matherr>
20000eee:	b1e0      	cbz	r0, 20000f2a <fmod+0xb6>
20000ef0:	9b08      	ldr	r3, [sp, #32]
20000ef2:	bb0b      	cbnz	r3, 20000f38 <fmod+0xc4>
20000ef4:	ed9d 0b06 	vldr	d0, [sp, #24]
20000ef8:	b00b      	add	sp, #44	; 0x2c
20000efa:	ecbd 8b02 	vpop	{d8}
20000efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
20000f02:	eeb0 0a48 	vmov.f32	s0, s16
20000f06:	eef0 0a68 	vmov.f32	s1, s17
20000f0a:	b00b      	add	sp, #44	; 0x2c
20000f0c:	ecbd 8b02 	vpop	{d8}
20000f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
20000f14:	2200      	movs	r2, #0
20000f16:	2300      	movs	r3, #0
20000f18:	4610      	mov	r0, r2
20000f1a:	4619      	mov	r1, r3
20000f1c:	f7ff fdd4 	bl	20000ac8 <__aeabi_ddiv>
20000f20:	f1b8 0f02 	cmp.w	r8, #2
20000f24:	e9cd 0106 	strd	r0, r1, [sp, #24]
20000f28:	d1de      	bne.n	20000ee8 <fmod+0x74>
20000f2a:	f000 f94b 	bl	200011c4 <__errno>
20000f2e:	2321      	movs	r3, #33	; 0x21
20000f30:	6003      	str	r3, [r0, #0]
20000f32:	9b08      	ldr	r3, [sp, #32]
20000f34:	2b00      	cmp	r3, #0
20000f36:	d0dd      	beq.n	20000ef4 <fmod+0x80>
20000f38:	f000 f944 	bl	200011c4 <__errno>
20000f3c:	9b08      	ldr	r3, [sp, #32]
20000f3e:	6003      	str	r3, [r0, #0]
20000f40:	e7d8      	b.n	20000ef4 <fmod+0x80>
20000f42:	bf00      	nop
20000f44:	200011f0 	.word	0x200011f0
20000f48:	200011d0 	.word	0x200011d0

20000f4c <__ieee754_fmod>:
20000f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
20000f50:	ec53 2b11 	vmov	r2, r3, d1
20000f54:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
20000f58:	ea52 0009 	orrs.w	r0, r2, r9
20000f5c:	ec55 4b10 	vmov	r4, r5, d0
20000f60:	d025      	beq.n	20000fae <__ieee754_fmod+0x62>
20000f62:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
20000f66:	488f      	ldr	r0, [pc, #572]	; (200011a4 <__ieee754_fmod+0x258>)
20000f68:	ea85 0b06 	eor.w	fp, r5, r6
20000f6c:	4583      	cmp	fp, r0
20000f6e:	dc1e      	bgt.n	20000fae <__ieee754_fmod+0x62>
20000f70:	4250      	negs	r0, r2
20000f72:	4310      	orrs	r0, r2
20000f74:	f8df c244 	ldr.w	ip, [pc, #580]	; 200011bc <__ieee754_fmod+0x270>
20000f78:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
20000f7c:	4560      	cmp	r0, ip
20000f7e:	ee11 8a10 	vmov	r8, s2
20000f82:	d814      	bhi.n	20000fae <__ieee754_fmod+0x62>
20000f84:	45cb      	cmp	fp, r9
20000f86:	461f      	mov	r7, r3
20000f88:	ee10 aa10 	vmov	sl, s0
20000f8c:	ee11 ea10 	vmov	lr, s2
20000f90:	ee10 1a10 	vmov	r1, s0
20000f94:	dc17      	bgt.n	20000fc6 <__ieee754_fmod+0x7a>
20000f96:	db28      	blt.n	20000fea <__ieee754_fmod+0x9e>
20000f98:	4294      	cmp	r4, r2
20000f9a:	d326      	bcc.n	20000fea <__ieee754_fmod+0x9e>
20000f9c:	d113      	bne.n	20000fc6 <__ieee754_fmod+0x7a>
20000f9e:	4b82      	ldr	r3, [pc, #520]	; (200011a8 <__ieee754_fmod+0x25c>)
20000fa0:	0ff6      	lsrs	r6, r6, #31
20000fa2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
20000fa6:	ed93 0b00 	vldr	d0, [r3]
20000faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
20000fae:	4620      	mov	r0, r4
20000fb0:	4629      	mov	r1, r5
20000fb2:	f7ff fc5f 	bl	20000874 <__aeabi_dmul>
20000fb6:	4602      	mov	r2, r0
20000fb8:	460b      	mov	r3, r1
20000fba:	f7ff fd85 	bl	20000ac8 <__aeabi_ddiv>
20000fbe:	ec41 0b10 	vmov	d0, r0, r1
20000fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
20000fc6:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
20000fca:	da12      	bge.n	20000ff2 <__ieee754_fmod+0xa6>
20000fcc:	f1bb 0f00 	cmp.w	fp, #0
20000fd0:	f040 80a7 	bne.w	20001122 <__ieee754_fmod+0x1d6>
20000fd4:	f1ba 0f00 	cmp.w	sl, #0
20000fd8:	4653      	mov	r3, sl
20000fda:	4874      	ldr	r0, [pc, #464]	; (200011ac <__ieee754_fmod+0x260>)
20000fdc:	dd0d      	ble.n	20000ffa <__ieee754_fmod+0xae>
20000fde:	005b      	lsls	r3, r3, #1
20000fe0:	2b00      	cmp	r3, #0
20000fe2:	f100 30ff 	add.w	r0, r0, #4294967295
20000fe6:	dcfa      	bgt.n	20000fde <__ieee754_fmod+0x92>
20000fe8:	e007      	b.n	20000ffa <__ieee754_fmod+0xae>
20000fea:	ec45 4b10 	vmov	d0, r4, r5
20000fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
20000ff2:	ea4f 502b 	mov.w	r0, fp, asr #20
20000ff6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
20000ffa:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
20000ffe:	da0f      	bge.n	20001020 <__ieee754_fmod+0xd4>
20001000:	f1b9 0f00 	cmp.w	r9, #0
20001004:	f040 80a7 	bne.w	20001156 <__ieee754_fmod+0x20a>
20001008:	f1b8 0f00 	cmp.w	r8, #0
2000100c:	4643      	mov	r3, r8
2000100e:	f8df c19c 	ldr.w	ip, [pc, #412]	; 200011ac <__ieee754_fmod+0x260>
20001012:	dd09      	ble.n	20001028 <__ieee754_fmod+0xdc>
20001014:	005b      	lsls	r3, r3, #1
20001016:	2b00      	cmp	r3, #0
20001018:	f10c 3cff 	add.w	ip, ip, #4294967295
2000101c:	dcfa      	bgt.n	20001014 <__ieee754_fmod+0xc8>
2000101e:	e003      	b.n	20001028 <__ieee754_fmod+0xdc>
20001020:	ea4f 5c29 	mov.w	ip, r9, asr #20
20001024:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
20001028:	4b61      	ldr	r3, [pc, #388]	; (200011b0 <__ieee754_fmod+0x264>)
2000102a:	4298      	cmp	r0, r3
2000102c:	db5b      	blt.n	200010e6 <__ieee754_fmod+0x19a>
2000102e:	f3cb 0313 	ubfx	r3, fp, #0, #20
20001032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20001036:	4a5e      	ldr	r2, [pc, #376]	; (200011b0 <__ieee754_fmod+0x264>)
20001038:	4594      	cmp	ip, r2
2000103a:	db63      	blt.n	20001104 <__ieee754_fmod+0x1b8>
2000103c:	f3c7 0513 	ubfx	r5, r7, #0, #20
20001040:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
20001044:	ebcc 0000 	rsb	r0, ip, r0
20001048:	e007      	b.n	2000105a <__ieee754_fmod+0x10e>
2000104a:	ea52 0304 	orrs.w	r3, r2, r4
2000104e:	d013      	beq.n	20001078 <__ieee754_fmod+0x12c>
20001050:	0fe3      	lsrs	r3, r4, #31
20001052:	eb03 0342 	add.w	r3, r3, r2, lsl #1
20001056:	0061      	lsls	r1, r4, #1
20001058:	3801      	subs	r0, #1
2000105a:	ebce 0401 	rsb	r4, lr, r1
2000105e:	1b5a      	subs	r2, r3, r5
20001060:	b190      	cbz	r0, 20001088 <__ieee754_fmod+0x13c>
20001062:	4571      	cmp	r1, lr
20001064:	bf38      	it	cc
20001066:	f102 32ff 	addcc.w	r2, r2, #4294967295
2000106a:	2a00      	cmp	r2, #0
2000106c:	daed      	bge.n	2000104a <__ieee754_fmod+0xfe>
2000106e:	0fca      	lsrs	r2, r1, #31
20001070:	eb02 0343 	add.w	r3, r2, r3, lsl #1
20001074:	0049      	lsls	r1, r1, #1
20001076:	e7ef      	b.n	20001058 <__ieee754_fmod+0x10c>
20001078:	4b4b      	ldr	r3, [pc, #300]	; (200011a8 <__ieee754_fmod+0x25c>)
2000107a:	0ff6      	lsrs	r6, r6, #31
2000107c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
20001080:	ed96 0b00 	vldr	d0, [r6]
20001084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
20001088:	4571      	cmp	r1, lr
2000108a:	4615      	mov	r5, r2
2000108c:	bf38      	it	cc
2000108e:	f102 35ff 	addcc.w	r5, r2, #4294967295
20001092:	2d00      	cmp	r5, #0
20001094:	bfac      	ite	ge
20001096:	ebce 0101 	rsbge	r1, lr, r1
2000109a:	461d      	movlt	r5, r3
2000109c:	ea55 0301 	orrs.w	r3, r5, r1
200010a0:	d0ea      	beq.n	20001078 <__ieee754_fmod+0x12c>
200010a2:	4a44      	ldr	r2, [pc, #272]	; (200011b4 <__ieee754_fmod+0x268>)
200010a4:	4295      	cmp	r5, r2
200010a6:	dc08      	bgt.n	200010ba <__ieee754_fmod+0x16e>
200010a8:	0fcb      	lsrs	r3, r1, #31
200010aa:	eb03 0545 	add.w	r5, r3, r5, lsl #1
200010ae:	4295      	cmp	r5, r2
200010b0:	f10c 3cff 	add.w	ip, ip, #4294967295
200010b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
200010b8:	ddf6      	ble.n	200010a8 <__ieee754_fmod+0x15c>
200010ba:	4b3d      	ldr	r3, [pc, #244]	; (200011b0 <__ieee754_fmod+0x264>)
200010bc:	459c      	cmp	ip, r3
200010be:	da54      	bge.n	2000116a <__ieee754_fmod+0x21e>
200010c0:	4a3b      	ldr	r2, [pc, #236]	; (200011b0 <__ieee754_fmod+0x264>)
200010c2:	ebcc 0202 	rsb	r2, ip, r2
200010c6:	2a14      	cmp	r2, #20
200010c8:	dc5b      	bgt.n	20001182 <__ieee754_fmod+0x236>
200010ca:	f1c2 0320 	rsb	r3, r2, #32
200010ce:	fa05 f303 	lsl.w	r3, r5, r3
200010d2:	40d1      	lsrs	r1, r2
200010d4:	430b      	orrs	r3, r1
200010d6:	4115      	asrs	r5, r2
200010d8:	ea45 0106 	orr.w	r1, r5, r6
200010dc:	4618      	mov	r0, r3
200010de:	ec41 0b10 	vmov	d0, r0, r1
200010e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
200010e6:	4932      	ldr	r1, [pc, #200]	; (200011b0 <__ieee754_fmod+0x264>)
200010e8:	1a09      	subs	r1, r1, r0
200010ea:	291f      	cmp	r1, #31
200010ec:	dc2d      	bgt.n	2000114a <__ieee754_fmod+0x1fe>
200010ee:	f1c1 0320 	rsb	r3, r1, #32
200010f2:	fa0b fb01 	lsl.w	fp, fp, r1
200010f6:	fa2a f303 	lsr.w	r3, sl, r3
200010fa:	ea43 030b 	orr.w	r3, r3, fp
200010fe:	fa0a f101 	lsl.w	r1, sl, r1
20001102:	e798      	b.n	20001036 <__ieee754_fmod+0xea>
20001104:	4c2a      	ldr	r4, [pc, #168]	; (200011b0 <__ieee754_fmod+0x264>)
20001106:	ebcc 0404 	rsb	r4, ip, r4
2000110a:	2c1f      	cmp	r4, #31
2000110c:	dc15      	bgt.n	2000113a <__ieee754_fmod+0x1ee>
2000110e:	f1c4 0220 	rsb	r2, r4, #32
20001112:	fa09 f504 	lsl.w	r5, r9, r4
20001116:	fa28 f202 	lsr.w	r2, r8, r2
2000111a:	4315      	orrs	r5, r2
2000111c:	fa08 fe04 	lsl.w	lr, r8, r4
20001120:	e790      	b.n	20001044 <__ieee754_fmod+0xf8>
20001122:	ea4f 23cb 	mov.w	r3, fp, lsl #11
20001126:	2b00      	cmp	r3, #0
20001128:	4821      	ldr	r0, [pc, #132]	; (200011b0 <__ieee754_fmod+0x264>)
2000112a:	f77f af66 	ble.w	20000ffa <__ieee754_fmod+0xae>
2000112e:	005b      	lsls	r3, r3, #1
20001130:	2b00      	cmp	r3, #0
20001132:	f100 30ff 	add.w	r0, r0, #4294967295
20001136:	dcfa      	bgt.n	2000112e <__ieee754_fmod+0x1e2>
20001138:	e75f      	b.n	20000ffa <__ieee754_fmod+0xae>
2000113a:	4d1f      	ldr	r5, [pc, #124]	; (200011b8 <__ieee754_fmod+0x26c>)
2000113c:	ebcc 0505 	rsb	r5, ip, r5
20001140:	fa08 f505 	lsl.w	r5, r8, r5
20001144:	f04f 0e00 	mov.w	lr, #0
20001148:	e77c      	b.n	20001044 <__ieee754_fmod+0xf8>
2000114a:	4b1b      	ldr	r3, [pc, #108]	; (200011b8 <__ieee754_fmod+0x26c>)
2000114c:	1a1b      	subs	r3, r3, r0
2000114e:	fa0a f303 	lsl.w	r3, sl, r3
20001152:	2100      	movs	r1, #0
20001154:	e76f      	b.n	20001036 <__ieee754_fmod+0xea>
20001156:	f8df c058 	ldr.w	ip, [pc, #88]	; 200011b0 <__ieee754_fmod+0x264>
2000115a:	ea4f 23c9 	mov.w	r3, r9, lsl #11
2000115e:	005b      	lsls	r3, r3, #1
20001160:	2b00      	cmp	r3, #0
20001162:	f10c 3cff 	add.w	ip, ip, #4294967295
20001166:	dcfa      	bgt.n	2000115e <__ieee754_fmod+0x212>
20001168:	e75e      	b.n	20001028 <__ieee754_fmod+0xdc>
2000116a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
2000116e:	432e      	orrs	r6, r5
20001170:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
20001174:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
20001178:	460a      	mov	r2, r1
2000117a:	ec43 2b10 	vmov	d0, r2, r3
2000117e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
20001182:	2a1f      	cmp	r2, #31
20001184:	dc07      	bgt.n	20001196 <__ieee754_fmod+0x24a>
20001186:	f1c2 0320 	rsb	r3, r2, #32
2000118a:	409d      	lsls	r5, r3
2000118c:	40d1      	lsrs	r1, r2
2000118e:	ea45 0301 	orr.w	r3, r5, r1
20001192:	4635      	mov	r5, r6
20001194:	e7a0      	b.n	200010d8 <__ieee754_fmod+0x18c>
20001196:	4b08      	ldr	r3, [pc, #32]	; (200011b8 <__ieee754_fmod+0x26c>)
20001198:	ebcc 0303 	rsb	r3, ip, r3
2000119c:	fa45 f303 	asr.w	r3, r5, r3
200011a0:	4635      	mov	r5, r6
200011a2:	e799      	b.n	200010d8 <__ieee754_fmod+0x18c>
200011a4:	7fefffff 	.word	0x7fefffff
200011a8:	200011d8 	.word	0x200011d8
200011ac:	fffffbed 	.word	0xfffffbed
200011b0:	fffffc02 	.word	0xfffffc02
200011b4:	000fffff 	.word	0x000fffff
200011b8:	fffffbe2 	.word	0xfffffbe2
200011bc:	7ff00000 	.word	0x7ff00000

200011c0 <matherr>:
200011c0:	2000      	movs	r0, #0
200011c2:	4770      	bx	lr

200011c4 <__errno>:
200011c4:	4b01      	ldr	r3, [pc, #4]	; (200011cc <__errno+0x8>)
200011c6:	6818      	ldr	r0, [r3, #0]
200011c8:	4770      	bx	lr
200011ca:	bf00      	nop
200011cc:	20001620 	.word	0x20001620
